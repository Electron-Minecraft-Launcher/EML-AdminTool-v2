name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-alpha.*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify branch is main
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          BRANCHES=$(git branch -r --contains tags/$TAG)
          if [[ ! "$BRANCHES" == *"origin/main"* ]]; then
            echo "Tag $TAG is not on the main branch. Stopping workflow."
            exit 1
          fi

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'

      # - name: Install dependencies
      #   run: npm install

      # - name: Build API
      #   run: |
      #     cd api
      #     npm run build
      
      # - name: Build Client
      #   run: |
      #     cd client
      #     npm run build
        
      # - name: Prepare dist folder
      #   run: |
      #     cp -r api/package.json dist/api
      #     cp -r client/package.json dist/client
      #     cp -r shared/package.json dist/shared
      #     cp package.json package-lock.json dist
      #     cd dist
      #     npm ci --omit=dev

      - name: Build Docker image
        run: |
          ls
          TAG=${GITHUB_REF/refs\/tags\//}
          docker build -t eml-admintool:$TAG -f docker/Dockerfile.prod .
      
      - name: Save Docker image as tarball
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          docker save eml-admintool:$TAG | gzip > eml-admintool-$TAG.tar.gz
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
      
      - name: Upload Docker Compose file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: docker/docker-compose.prod.yml
          asset_name: docker/docker-compose.prod.yml
          asset_content_type: text/yaml
      
      - name: Upload Docker image as tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: eml-admintool-${{ github.ref }}.tar.gz
          asset_name: eml-admintool-${{ github.ref }}.tar.gz
          asset_content_type: application/gzip
        